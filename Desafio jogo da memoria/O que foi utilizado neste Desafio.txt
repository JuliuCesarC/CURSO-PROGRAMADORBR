Dentro do desafio do Jogo da Memória, temos algumas funções novas, e algumas funções que ja foi mostrado anteriormente, porém muito dessas funções são utilizadas de maneira muito diferente. 
	Abaixo temos as funções utilizadas em ordem:

ARQUIVO SCRIPT01.JS

-ARRAY.forEach( (parâmetro) => { } )
	O método forEach executa uma função para cada item do array. exemplo:
array.forEach(numeros => console.log(numeros*2) )
Isso ira mostrar no console todos os numeros de um array mutiplicado por 2.

-ELEMENTO.classList.
	A propriedade classList serve para acessar o atributo 'class' do elemento html, dessa forma podemos adicionar uma classe com o 'classList.add("novaClasse")' e remover uma classe com o 'classList.remove("novaClasse")'.

-ELEMENTO.dataset.
	A propriedade dataset serve para criar um atributo personalisado dentro do elemento html, exemplo:
ELEMENTO.dataset.Nome = "Jão"; 
Agora dentro do elemento temos o atributo 'data-Nome="Jão"', que pode ser lido/alterado com o dataset. Ainda podemos ter outros 'data-set' dentro do mesmo elemento.

-ELEMENTO.addEventListener('', function)
	O método addEventListener já foi visto anteriormente, porém ele possui uma característica que foi explorada nesse Desafio. Quando adicionamos um evento que ativa uma função, as informações do elemento são enviadas para a função, e podemos acessar essas informações com o 'this' mesmo que a função não tenha setado algum parametro, exemplo:
ELEMENTO.addEventListener('click', fazAlgo)
function fazAlgo(){
   if(this.id == '123'){....}
}
Se o elemento possuir ID podemos acessar com o 'this.id', caso o elemento tenha outros atributos, também podemos acessar eles. Podemos acessar os filhos desse elemento
this.children[1] : acessando o segundo filho.

-ELEMENTO.style.
	A propriedade style é uma maneira de modificar o CSS de um elemento html com javaScript. 
----------/----------
ARQUIVO GAME.JS
	No arquivo game.js, foi criado todas as funções e variaveis dentro de um objeto, dessa maneira podemos chamar as funções e variaveis da seguinte maneira:
-OBJETO.qualquerFunção()
-OBJETO.variavel01
	Porém temos algumas diferenças na hora de setar um função ou variavel, exemplo:
-qualquerFunção: function(){
    return this.variavel01 = true
 },
	Primeiro colocamos o nome, para depois atribuir uma função para esse nome, e para utilizar alguma variavel ou chamar outra função dentro do objeto é preciso utilizar o 'this' e como é um objeto, cada indice é separado por uma virgula.
-variavel01: null / 'Texto aqui' / True / 33.5 ,
	Aqui não precisamos utilizar um 'let' ou 'var', apenas atribuimos uma informação para esse indice.

-ARRAY.filter( parametro => )
	O método filter como o nome sugere, é um filtro que cria um novo array de acordo com o que for setado dentro da arrow function.
let array01 = ['Jão', 'Sofhia', 'Marco', 'Jhenfiner']
array01.filter(nomes => nomes.length>5)[0]
	O filtro acima ira pegar apenas o primeiro texto com mais de 5 letras. Ou seja, cada item dentro do array que retornar 'true' de acordo com a logica dentro do arrow function ira para dentro desse novo array, e oq retorna 'false' é ignorado.

-ARRAY.flatMap( parametro => )
	O método flatMap retorna um novo array aplicando um callback para cada item do array original. Diferente do 'filter' que só adiciona o item se o teste logico der 'true', no flatMap ele sempre adiciona o item no novo array, exemplo:
array.flatMap( nomes => nomes + "Cardoso" )
O resultado é um novo array em que todos os nomes foram concatenados com com o texto "Cardoso", ou seja todos os nomes ficaram com o Cardoso no final.